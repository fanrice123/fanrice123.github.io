{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/implementing-memory-manager-for-lock-free-data-structure","result":{"data":{"post":{"__typename":"MdxPost","slug":"/implementing-memory-manager-for-lock-free-data-structure","title":"Implementing Memory Manager for Lock Free Data Structure","date":"19.07.2020","tags":[{"name":"lock free","slug":"lock-free"},{"name":"concurrent","slug":"concurrent"},{"name":"multicore programming","slug":"multicore-programming"}],"description":"Brief Introduction to lock free data structure and ABA problem, then discuss about IBR reclamation moddel.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Implementing Memory Manager for Lock Free Data Structure\",\n  \"date\": \"2020-07-19T00:00:00.000Z\",\n  \"description\": \"Brief Introduction to lock free data structure and ABA problem, then discuss about IBR reclamation moddel.\",\n  \"tags\": [\"lock free\", \"concurrent\", \"multicore programming\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The way the processor industry is going, is to add more and more cores,\\nbut nobody knows how to program those things.\\nI mean, 2, yeah; 4, not really; eight, forget it.\\n-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Steve Jobs\"))), mdx(\"br\", null), \"Multicore programming is not as easy as it sounds. Since I began to learn multi-core programming (to be specific, multi-threaded programming), the synchronisation of multiple threads relies on locking and mutex.\", mdx(\"p\", null, \"The use case of locking mutex is simple:\"), mdx(\"p\", null, \"Let's say there is a list shared by multiple thread, and each thread needs to perform certain action with the list,\\nit can be adding element, it can be  removing element, checking size, whatever.\\nWell, to synchronise the list modification process, threads are required to lock a mutex.\\nIf locking is successful, the thread proceed to acts towards list;\\nIf locking fails, the thread fall into sleep until mutex become available.\"), mdx(\"h2\", null, \"Sweet!\"), mdx(\"h2\", null, \"Multi-threaded programming! See you in the next episode!\"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h2\", null, \"Wait.....\"), mdx(\"p\", null, \"The story isn't over...\"), mdx(\"p\", null, \"Back to the list mentioned, we \"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"The way the processor industry is going, is to add more and more cores, \nbut nobody knows how to program those things.\nI mean, 2, yeah;â€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/implementing-memory-manager-for-lock-free-data-structure","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}